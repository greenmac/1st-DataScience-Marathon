．numpy下列是常用的函式及簡介：
函式	                            說明	                            產生數值區間	隨機數資料型別	隨機數分佈
    rand()	                            隨機產生指定形狀(shape)的陣列	    [0, 1)	    浮點數	        連續型均勻分布
    randn()	                            隨機產生指定形狀(shape)的陣列	    (-1, 1)	    浮點數	        常態分佈
    randint((low, high, size, dtype))	隨機產生設定區間元素	            [low, high)	整數	        離散型均勻分布
    random_sample(size)	                隨機產生指定大小的一維陣列	        [0.0, 1.0)	浮點數	        連續型均勻分布
    random(size)	                    隨機產生指定大小的一維陣列	        [0.0, 1.0)	浮點數	        連續型均勻分布
    randf(size)	                        隨機產生指定大小的一維陣列	        [0.0, 1.0)	浮點數	        連續型均勻分布
    sample(size)	                    隨機產生指定大小的一維陣列	        [0.0, 1.0)	浮點數	        連續型均勻分布

．取近似值的函式及說明如下表：
函式	            常用語法	                    說明
round(), around()	ndarray.round(decimals=0), 
                    numpy.round(a, decimals=0), 
                    numpy.around(a, decimals=0)	    在Rounding 的方法部分，與 Python 同樣採用 IEEE 754 規範，四捨、五取最近偶數、六入，
                                                    而非我們一般講的四捨五入。round 與 around 用法及結果相同
rint()	            numpy.rint(a)	                Round至最近的整數
trunc()	            numpy.trunc(a)	                無條件捨去小數點
floor()	            numpy.floor(a)	                向下取整數
ceil()	            numpy.ceil(a)	                向上取整數
fix()	            numpy.ceil(a)	                向0的方向取整數

．比較：等於/不等於、大於/大於或等於、小於/小於或等於
函式	            說明
np.equal()	        等於
np.not_equal()	    不等於
np.greater()	    大於
np.greater_equal()	大於或等於
np.less()	        小於
np.less_equal()	    小於或等於
*上列的函式均可以比較兩個形狀相同的陣列，或是比較符合廣播規則的兩個陣列，若元素值相同的話就回傳 True。
*比較時均是 element-wise 的比較。

．有一個數組z，它的shape屬性是(4, 4)
z = np.array([[1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12],
    [13, 14, 15, 16]])
z.shape
=>(4, 4)
先前我們不知道z的shape屬性是多少，但是想讓z變成只有一列，行數不知道多少，通過 z.reshape(-1,1)，
Numpy自動計算出有12行，新的數組shape屬性為(16, 1)，與原來的(4, 4)配套
z.reshape(-1)
=>array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16])

．bins
bins是被切割後的區間（或者叫“桶”、“箱”、“面元”），有3中形式：
1.一個int型的標量、標量序列（數組）或者pandas.IntervalIndex 。
2.一個int型的標量當bins為一個int型的標量時，代表將x平分成bins份。 
3.x的範圍在每側擴展0.1%，以包括x的最大值和最小值

．相關係數：np.corrcoef()
corrcoef() 計算 Pearson 積差相關係數。引數 rowvar 預設值為 True，代表將每一個 row 當做是一筆變數。
語法如下：
numpy.corrcoef(x, y=None, rowvar=True)

．pandas # 顯示所有行, 列
import pandas as pd
# 顯示所有行, 列
pd.set_option('display.max_rows', None) # 行
pd.set_option('display.max_columns', None) # 列

．fillna
1.以0填補 .fillna(0)
2.以該欄位所有資料的算術平均數做填補 .mean()
3.以該欄位所有資料的中位數做填補 .median()
4.運用參數method=‘ffill’即可填補前一列數值 .fillna(method='ffill')
5.填補後一列數值 .fillna(method='bfill')
6.內差法補值 .interpolate()

．python cumsum函数
這個函數的功能是返回給定axis上的累計和
1.對於一維輸入a（可以是list，可以是array，
假設a=[1, 2, 3, 4, 5, 6, 7] ，就是當​​前列之前的和加到當前列上，如下：
>>>import numpy as np
>>> a=[1,2,3,4,5,6,7]
>>> np.cumsum(a)
array([  1,   3,   6,  10,  15,  21,  28])
2.對於二維輸入a，axis=0(第1行不動，將第1行累加到其他行)；
axis=1(進入最內層，轉化成列處理。第1列不動，將第1列累加到其他列)，如下：
>>>import numpy as np
>>> c=[[1,2,3],[4,5,6],[7,8,9]]
>>> np.cumsum(c,axis=0)
array([[ 1,  2,  3],
       [ 5,  7,  9],
       [12, 15, 18]])
>>> np.cumsum(c,axis=1)
array([[ 1,  3,  6],
       [ 4,  9, 15],
       [ 7, 15, 24]])
3.对于三维输入a, axis=0 (第1行不动，将第1行累加到其他行)； axis=1(进入第2层，每个第二层第1行不动，累加到其他行)； 
axis=2(进入最内层，转化成列处理。第1列不动，将其累加到其他列)，注意维数从外到内是0-2编号，如下：
>>>import numpy as np
>>> a
[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 20, 30]]]
>>> np.cumsum(a,axis=0)
array([[[ 1,  2,  3],
        [ 4,  5,  6]],
       [[ 8, 10, 12],
        [14, 25, 36]]])
>>> np.cumsum(a,axis=1)
array([[[ 1,  2,  3],
        [ 5,  7,  9]],
       [[ 7,  8,  9],
        [17, 28, 39]]])
>>> np.cumsum(a,axis=2)
array([[[ 1,  3,  6],
        [ 4,  9, 15]],
       [[ 7, 15, 24],
        [10, 30, 60]]])

．資料科學的 Split-Apply-Combine
1.Groupby可以同時針對多個欄位做 Group，並在Group中做運算 
2.Split：將大的數據集拆成可獨立計算的小數據集 
3.Apply：獨立計算各個小數據集 
4.Combine：將小數據集運算結果合併

．xlim() 和 ylim() 在 Matplotlib 中設定軸的限制
import numpy as np
import matplotlib.pyplot as plt
x=np.linspace(0,10,500)
y=np.sin(2 * np.pi * x)+1
fig = plt.figure(figsize=(8, 6))
plt.plot(x,y)
plt.title("Setting range of Axes",fontsize=25)
plt.xlabel("x",fontsize=18)
plt.ylabel("1+sinx",fontsize=18)
plt.xlim(4,8)
plt.ylim(-0.5,2.5)
plt.show()

．a = np.unique(A)
对于一维数组或者列表，unique函数去除其中重复的元素，
并按元素由大到小返回一个新的无元素重复的元组或者列表

．abs() 函数返回数字的绝对值。
以下是 abs() 方法的语法:
abs(x)

．Z-score method
https://www.simplypsychology.org/z-score.html
當以標準差為單位進行測量時，z得分以原始得分相對於平均值的距離來描述其位置。如果該值高於平均值，則z分數為正；如果低於平均值，則z分數為負。

它也被稱為標準分數，因為它可以通過標準化分佈來比較不同種類變量的分數。
計算z分數的公式是z =（x-μ）/σ，其中x是原始分數，μ是總體平均值，而σ是總體標準偏差。

．